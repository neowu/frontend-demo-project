import webpack from "webpack";
import env from "./env.mjs";
import autoprefixer from "autoprefixer";
import MiniCSSExtractPlugin from "mini-css-extract-plugin";
import CSSMinimizerPlugin from "css-minimizer-webpack-plugin";
import ForkTSCheckerPlugin from "fork-ts-checker-webpack-plugin";
import HTMLPlugin from "html-webpack-plugin";
import StylelintPlugin from "stylelint-webpack-plugin";
import TerserPlugin from "terser-webpack-plugin";
import TSImportPlugin from "ts-import-plugin";

const config = {
  mode: "production",
  entry: `${env.src}/index.tsx`,
  target: ["web", "es5"], // to support IE 11
  output: {
    path: env.dist,
    filename: "static/js/[name].[chunkhash:8].js",
    publicPath: env.webpackJSON === null ? "/" : env.webpackJSON.publicPath,
  },
  resolve: {
    extensions: [".ts", ".tsx", ".js", ".jsx", ".less"],
    modules: [env.src, "node_modules"],
    alias: {
      conf: env.conf,
      lib: env.lib,
    },
  },
  devtool: false,
  bail: true,
  optimization: {
    moduleIds: "named",
    runtimeChunk: "single",
    splitChunks: {
      automaticNameDelimiter: "-",
      maxAsyncRequests: 10,
    },
    minimizer: [
      new TerserPlugin({
        parallel: true,
      }),
      new CSSMinimizerPlugin(),
    ],
  },
  performance: {
    maxEntrypointSize: 1000000,
    maxAssetSize: 1000000,
  },
  module: {
    rules: [
      {
        test: /\.m?js/,
        resolve: {
          fullySpecified: false,
        },
      },
      {
        test: /\.(ts|tsx)$/,
        include: env.src,
        loader: "ts-loader",
        options: {
          configFile: env.tsConfig,
          transpileOnly: true,
          getCustomTransformers: () => ({
            before: [TSImportPlugin({libraryName: "antd", libraryDirectory: "es", style: true})],
          }),
        },
      },
      {
        test: /\.(css|less)$/,
        use: [
          MiniCSSExtractPlugin.loader,
          {
            loader: "css-loader",
            options: {
              sourceMap: false,
              importLoaders: 2,
            },
          },
          {
            loader: "postcss-loader",
            options: {
              sourceMap: false,
              postcssOptions: {
                plugins: [autoprefixer],
              },
            },
          },
          {
            loader: "less-loader",
            options: {
              sourceMap: false,
              lessOptions: {
                javascriptEnabled: true,
              },
            },
          },
        ],
      },
      {
        test: /\.(png|jpe?g|gif)$/,
        type: "asset/resource",
        generator: {
          filename: "static/img/[name].[hash:8].[ext]",
        },
      },
      {
        test: /\.(woff|woff2|eot|ttf|otf)$/,
        type: "asset/resource",
        generator: {
          filename: "static/font/[name].[hash:8].[ext]",
        },
      },
      {
        test: /\.ico$/,
        type: "asset/resource",
        generator: {
          filename: "static/ico/[name].[hash:8].ico",
        },
      },
    ],
  },
  plugins: [
    new MiniCSSExtractPlugin({
      filename: "static/css/[name].[contenthash:8].css",
      ignoreOrder: true,
    }),
    new ForkTSCheckerPlugin({
      typescript: {configFile: env.tsConfig},
      eslint: {files: `${env.src}/**/*.{ts,tsx}`},
    }),
    new StylelintPlugin({
      configFile: env.stylelintConfig,
      context: env.src,
      files: "**/*.less",
    }),
    new HTMLPlugin({
      template: `${env.src}/index.html`,
      minify: {
        collapseBooleanAttributes: true,
        collapseInlineTagWhitespace: true,
        collapseWhitespace: true,
        includeAutoGeneratedTags: false,
        keepClosingSlash: true,
        minifyCSS: true,
        minifyJS: true,
        minifyURLs: true,
        removeAttributeQuotes: true,
        removeComments: true,
        removeEmptyAttributes: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        removeTagWhitespace: true,
        useShortDoctype: true,
      },
    }),
    new webpack.ProgressPlugin({profile: env.profile}),
    new webpack.IgnorePlugin({
      resourceRegExp: /^\.\/locale$/,
      contextRegExp: /moment$/,
    }),
  ],
};

export default config;
